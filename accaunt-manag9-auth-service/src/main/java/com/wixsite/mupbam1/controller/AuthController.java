package com.wixsite.mupbam1.controller;

import com.wixsite.mupbam1.dto.AuthRequest;
import com.wixsite.mupbam1.dto.VerifyRequest;
import com.wixsite.mupbam1.model.User;
import com.wixsite.mupbam1.service.AuthService;
import com.wixsite.mupbam1.service.EmailService;
import com.wixsite.mupbam1.service.TokenStoreService;
import com.wixsite.mupbam1.util.JwtUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.concurrent.TimeUnit;

@RestController
@RequestMapping("/auth")
@RequiredArgsConstructor
public class AuthController {

    private final JwtUtil jwtUtil;
    private final TokenStoreService tokenStoreService;
    private final RedisTemplate<String, String> redisTemplate;
    private final AuthService authService;
    private final EmailService emailService;

    // üîπ 1. Login ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞—ë–º –∫–æ–¥ 2FA –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody AuthRequest authRequest) {
        // TODO: –ø—Ä–æ–≤–µ—Ä–∫–∞ username/password —á–µ—Ä–µ–∑ AuthService
    	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null
    	User user = authService.authenticate(authRequest);

    	if ( user == null) {
    	    return ResponseEntity.status(401).body(Map.of(
    	            "error", "Invalid username or password"
    	    ));
    	}

    	// –î–∞–ª–µ–µ: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 2FA –∫–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ email –∏ —Ç.–¥.

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ 2FA
        String code = String.valueOf((int)(Math.random() * 900000) + 100000);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ Redis —Å TTL 10 –º–∏–Ω—É—Ç
        String redisKey = "2fa:" + authRequest.getUsername();
        redisTemplate.opsForValue().set(redisKey, code, 10, TimeUnit.MINUTES);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email
        String email = authService.getEmailByUsername(authRequest.getUsername());
        emailService.sendVerificationCode(email, code);

        return ResponseEntity.ok(Map.of(
                "message", "Please check your email for verification code"
        ));
    }

    // üîπ 2. Verify ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ 2FA, —Å–æ–∑–¥–∞—ë–º JWT –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
    @PostMapping("/verify")
    public ResponseEntity<?> verify(@RequestBody VerifyRequest verifyRequest) {
        boolean codeValid = checkCode(verifyRequest.getUsername(), verifyRequest.getCode());
        if (!codeValid) {
            return ResponseEntity.status(401).body(Map.of(
                    "error", "Invalid or expired verification code"
            ));
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AuthService
        String role = authService.getRoleByUsername(verifyRequest.getUsername());

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
        String token = jwtUtil.generateToken(verifyRequest.getUsername(), role);


        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Redis —Å TTL 1 —á–∞—Å
        tokenStoreService.saveToken(token, 3600_000);
        /*
        return ResponseEntity.ok()
                .header("Authorization", "Bearer " + token)
                .body(Map.of(
                    "message", "Verification successful"
                ));
                */

        return ResponseEntity.ok(Map.of(
                "message", "Verification successful",
                "token", token
        ));
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ 2FA –≤ Redis
    private boolean checkCode(String username, String code) {
        String redisKey = "2fa:" + username;
        String storedCode = redisTemplate.opsForValue().get(redisKey);

        if (storedCode == null) {
            return false; // –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫
        }

        boolean isValid = storedCode.equals(code);

        if (isValid) {
            redisTemplate.delete(redisKey); // —É–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        }

        return isValid;
    }
}
