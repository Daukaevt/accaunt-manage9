package com.wixsite.mupbam1.service;

import com.wixsite.mupbam1.dto.AuthRequest;
import com.wixsite.mupbam1.exceptions.EmailAlreadyRegisteredException;
import com.wixsite.mupbam1.exceptions.UserAlreadyExistsException;
import com.wixsite.mupbam1.exceptions.UserBlockedException;
import com.wixsite.mupbam1.model.User;
import com.wixsite.mupbam1.repository.UserRepository;
import lombok.RequiredArgsConstructor;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final UserRepository userRepository;
    private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    // –î–ª—è brute-force –∑–∞—â–∏—Ç—ã
    private final Map<String, Integer> loginAttempts = new ConcurrentHashMap<>();
    private final Map<String, LocalDateTime> blockedUntil = new ConcurrentHashMap<>();
    private final int MAX_ATTEMPTS = 5;
    private final int BLOCK_MINUTES = 15;

    public boolean authenticate(AuthRequest authRequest) {
        String username = authRequest.getUsername().toLowerCase();

/* –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –•—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏.
 * 
 * üîπ –°–ª–µ–¥—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:

–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º –∏–Ω—Å—Ç–∞–Ω—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–∫–ª–∞—Å—Ç–µ—Ä), –ø–æ–ø—ã—Ç–∫–∏ –ª–æ–≥–∏–Ω–∞ –Ω–∞ –æ–¥–Ω–æ–º –∏–Ω—Å—Ç–∞–Ω—Å–µ –Ω–µ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–º.

–î–∞–Ω–Ω—ã–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.
–ü–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.

–•—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –±—ã—Å—Ç—Ä–æ–µ, –Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö –∏–ª–∏ –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:

–•—Ä–∞–Ω–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ Redis –∏–ª–∏ –¥—Ä—É–≥–æ–π –≤–Ω–µ—à–Ω–µ–π –±–∞–∑–µ —Å TTL.

–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ.
 * 
 */
        if (blockedUntil.containsKey(username)) {
            LocalDateTime unblockTime = blockedUntil.get(username);
            if (LocalDateTime.now().isBefore(unblockTime)) {
                throw new UserBlockedException("Too many failed login attempts. User is temporarily blocked for " + BLOCK_MINUTES + " minutes.");
            } else {
                blockedUntil.remove(username);
                loginAttempts.remove(username);
            }
        }

        boolean authenticated = userRepository.findByUsername(username)
                .filter(user -> passwordEncoder.matches(authRequest.getPassword(), user.getPassword()))
                .isPresent();

        if (authenticated) {
            loginAttempts.remove(username);
            blockedUntil.remove(username);
        } else {
            int attempts = loginAttempts.getOrDefault(username, 0) + 1;
            loginAttempts.put(username, attempts);

            if (attempts >= MAX_ATTEMPTS) {
                blockedUntil.put(username, LocalDateTime.now().plusMinutes(BLOCK_MINUTES));
                throw new UserBlockedException("Too many failed login attempts. User is temporarily blocked for " + BLOCK_MINUTES + " minutes.");
            }
        }

        return authenticated;
    }


    public void register(AuthRequest authRequest) {
        String normalizedUsername = authRequest.getUsername().toLowerCase();

        if (userRepository.findByUsername(normalizedUsername).isPresent()) {
            throw new UserAlreadyExistsException("User already exists");
        }
        if (userRepository.findByEmail(authRequest.getEmail()).isPresent()) {
            throw new EmailAlreadyRegisteredException("Email already registered");
        }

        User user = new User();
        user.setUsername(normalizedUsername); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        user.setPassword(passwordEncoder.encode(authRequest.getPassword()));
        user.setRole(authRequest.getRole());
        user.setEmail(authRequest.getEmail());
        userRepository.save(user);
    }

    
    public String getEmailByUsername(String username) {
        return userRepository.findByUsername(username.toLowerCase())
                .map(User::getEmail)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
    }
    
    public String getRoleByUsername(String username) {
        return userRepository.findByUsername(username.toLowerCase())
                .map(User::getRole)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
    }  
}
